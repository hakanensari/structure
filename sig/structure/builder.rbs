module Structure
  class Builder
    @mappings: Hash[Symbol, String]
    @types: Hash[Symbol, untyped]
    @defaults: Hash[Symbol, untyped]
    @after_parse_callback: Proc?

    def attribute: (Symbol name, untyped type, ?from: String?, ?default: untyped) ?{ (untyped) -> untyped } -> void
                 | (Symbol name, ?from: String, ?default: untyped) ?{ (untyped) -> untyped } -> void

    def after_parse: () { (Data) -> void } -> void

    def attributes: () -> Array[Symbol]
    def mappings: () -> Hash[Symbol, String]
    def types: () -> Hash[Symbol, untyped]
    def defaults: () -> Hash[Symbol, untyped]
    def coercions: (?untyped? context_class) -> Hash[Symbol, Proc]
    def predicate_methods: () -> Hash[Symbol, Symbol]
    def after_parse_callback: () -> (Proc | nil)
  end
end
